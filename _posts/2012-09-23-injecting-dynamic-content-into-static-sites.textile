---
layout: post
title: Injecting Dynamic Content into Static Sites
blog: active
author: Thomas
---

In the land of modern websites, static is the new dynamic. Site generators like "Jekyll":https://github.com/mojombo/jekyll/ bring a streamlined approach to implementing and maintaining blogs and other mostly static sites, replacing the bloat of a traditional CMS. Meanwhile, finding cheap or even free static site hosting (e.g., "GitHub Pages":http://pages.github.com/) is becoming easier and more convenient. The combination looks perfect (at least on paper).

What happens when you absolutely need the pop of dynamic content to flesh out your otherwise flat webpage, though? Your static only site is probably limited to just JavaScript, HTML, and CSS. What could you possibly hope to achieve with such a limited toolset?

In general, you probably shouldn't try to do too much. Migrating the site to a full-featured web host will, in general, be much cleaner and less painless than trying to work around the restrictions of your static host. If you're really set on keeping the convenience and simplicity of your static site, though, and aren't planning on doing anything too crazy, there are a few tricks that can do the job for you.

First, we look to AJAX to solve all our problems. Unfortunately (or perhaps fortunately, since from a security perspective it really is a good idea), due to the "same origin policy":http://en.wikipedia.org/wiki/Same_origin_policy, we can't just load HTML from arbitrary sites outside our domain. That's not the end of the story, however. If the place you want to get your dynamic content from has a JSONP API, you can send them an HTTP GET request and get back some JSON containing your content even across different domains. How you do this is going to be dependent on where the content is coming from, but you can find a good general introduction on using Flickr's JSONP API "here":http://richardshepherd.com/how-to-use-jquery-with-a-json-flickr-feed-to-display-photos/.

If the content you're trying to get at isn't served by a JSONP API, and you don't feel like building one yourself, there is "a third option":http://www.youtube.com/watch?v=seUDDFahvGg.

<div class="alert">
  <strong>Warning!</strong> The workaround described below exploits the legacy feature of most browsers that allows scripts to be included from external domains. This is technically a violation of the same origin policy and is bad practice in general.
</div>

After that overly dramatic introduction, it turns out the workaround itself is fairly straightforward. We use a separate server to generate the content and wrap it up into a piece of JavaScript that we include from our static site. If there's a lot of data coming in, we can use HTML5's "<code><script async></code>":http://www.w3schools.com/html5/att_script_async.asp to load it asynchronously. It seems like we're creating more problems than we're solving by doing this, since now we have to write a webapp and run that on another server. Clearly this is not the best solution. If we're set on this, though, we can still accomplish it by throwing an ultralight "Flask":http://flask.pocoo.org/ application onto "Heroku":http://www.heroku.com/. This is actually the workaround "sclabs":http://sclabs.gilgi.org just implemented to dynamically provide the live status of a Teamspeak server on the "Scoot's Canoe website":http://scootscanoe.gilgi.org/teamspeak. The static site can't check the status directly, so instead it makes the client request a script from a utility server ("flask.gilgi.org":http://flask.gilgi.org). The utility server checks the status of the server and injects the status into a script, which it sends back to the client. In turn, the script injects the status into the HTML of the static site, and the client sees the status. While this is definitely not the cleanest solution in the world, it does get the job done, and it preserves the static purity of your site to boot! Flask and Heroku should be quite easy to pick up, especially after following "this tutorial":https://devcenter.heroku.com/articles/python, but if you're still interested, the full code for the utility server can be found "here":https://github.com/sclabs/flask.gilgi.org.